{"ast":null,"code":"var aesjs=require('aes-js');// This will decrypt Key CTR\nexport var decryptDataCTR=function decryptDataCTR(encryptedData,studyKey,iv){// Convert the study key to bytes\nvar studyKeyBytes=aesjs.utils.utf8.toBytes(studyKey);var encryptedBytes_k1=aesjs.utils.hex.toBytes(encryptedData);// correct\nvar initVector=aesjs.utils.hex.toBytes(iv);// correct\nvar buffInitVector=Buffer.from(initVector);var aesCbc=new aesjs.ModeOfOperation.ctr(studyKeyBytes,buffInitVector);var decryptedBytes=aesCbc.decrypt(encryptedBytes_k1);// Convert our bytes back into text\nvar decryptedText=aesjs.utils.utf8.fromBytes(decryptedBytes);return decryptedText;};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/Utils/DecryptDataCTR.js"],"names":["aesjs","require","decryptDataCTR","encryptedData","studyKey","iv","studyKeyBytes","utils","utf8","toBytes","encryptedBytes_k1","hex","initVector","buffInitVector","Buffer","from","aesCbc","ModeOfOperation","ctr","decryptedBytes","decrypt","decryptedText","fromBytes"],"mappings":"AAAA,GAAIA,CAAAA,KAAK,CAAGC,OAAO,CAAC,QAAD,CAAnB,CAEA;AACA,MAAO,IAAIC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,aAAD,CAAgBC,QAAhB,CAA0BC,EAA1B,CAAiC,CAEzD;AACA,GAAIC,CAAAA,aAAa,CAAGN,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBL,QAAzB,CAApB,CACA,GAAIM,CAAAA,iBAAiB,CAAGV,KAAK,CAACO,KAAN,CAAYI,GAAZ,CAAgBF,OAAhB,CAAwBN,aAAxB,CAAxB,CAAgE;AAChE,GAAIS,CAAAA,UAAU,CAAGZ,KAAK,CAACO,KAAN,CAAYI,GAAZ,CAAgBF,OAAhB,CAAwBJ,EAAxB,CAAjB,CAA8C;AAC9C,GAAIQ,CAAAA,cAAc,CAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAArB,CAEA,GAAII,CAAAA,MAAM,CAAG,GAAIhB,CAAAA,KAAK,CAACiB,eAAN,CAAsBC,GAA1B,CAA8BZ,aAA9B,CAA6CO,cAA7C,CAAb,CACA,GAAIM,CAAAA,cAAc,CAAGH,MAAM,CAACI,OAAP,CAAeV,iBAAf,CAArB,CAEJ;AACI,GAAIW,CAAAA,aAAa,CAAGrB,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBc,SAAjB,CAA2BH,cAA3B,CAApB,CACA,MAAOE,CAAAA,aAAP,CACH,CAdM","sourcesContent":["let aesjs = require('aes-js');\n\n// This will decrypt Key CTR\nexport let decryptDataCTR = (encryptedData, studyKey, iv) => {\n\n    // Convert the study key to bytes\n    let studyKeyBytes = aesjs.utils.utf8.toBytes(studyKey);\n    let encryptedBytes_k1 = aesjs.utils.hex.toBytes(encryptedData); // correct\n    let initVector = aesjs.utils.hex.toBytes(iv); // correct\n    let buffInitVector = Buffer.from(initVector);\n   \n    let aesCbc = new aesjs.ModeOfOperation.ctr(studyKeyBytes, buffInitVector);\n    let decryptedBytes = aesCbc.decrypt(encryptedBytes_k1);\n\n// Convert our bytes back into text\n    let decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n    return decryptedText;\n}"]},"metadata":{},"sourceType":"module"}