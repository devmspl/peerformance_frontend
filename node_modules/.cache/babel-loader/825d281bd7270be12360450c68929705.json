{"ast":null,"code":"const defaultOptions = [{\n  id: 0,\n  value: \"Too weak\",\n  minDiversity: 0,\n  minLength: 0\n}, {\n  id: 1,\n  value: \"Weak\",\n  minDiversity: 2,\n  minLength: 6\n}, {\n  id: 2,\n  value: \"Medium\",\n  minDiversity: 4,\n  minLength: 8\n}, {\n  id: 3,\n  value: \"Strong\",\n  minDiversity: 4,\n  minLength: 10\n}];\n\nconst escapeRegExp = string => string.replace(/[-.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nconst passwordStrength = function (password) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  let allowedSymbols = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"!@#$%^&*\";\n  let passwordCopy = password || '';\n  options[0].minDiversity = 0, options[0].minLength = 0;\n  const rules = [{\n    regex: \"[a-z]\",\n    message: 'lowercase'\n  }, {\n    regex: '[A-Z]',\n    message: 'uppercase'\n  }, {\n    regex: '[0-9]',\n    message: 'number'\n  }];\n\n  if (allowedSymbols) {\n    rules.push({\n      regex: `[${escapeRegExp(allowedSymbols)}]`,\n      message: 'symbol'\n    });\n  }\n\n  let strength = {};\n  strength.contains = rules.filter(rule => new RegExp(`${rule.regex}`).test(passwordCopy)).map(rule => rule.message);\n  strength.length = passwordCopy.length;\n  let fulfilledOptions = options.filter(option => strength.contains.length >= option.minDiversity).filter(option => strength.length >= option.minLength).sort((o1, o2) => o2.id - o1.id).map(option => ({\n    id: option.id,\n    value: option.value\n  }));\n  Object.assign(strength, fulfilledOptions[0]);\n  return strength;\n};\n\nmodule.exports = {\n  passwordStrength,\n  defaultOptions\n};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/node_modules/check-password-strength/index.js"],"names":["defaultOptions","id","value","minDiversity","minLength","escapeRegExp","string","replace","passwordStrength","password","options","allowedSymbols","passwordCopy","rules","regex","message","push","strength","contains","filter","rule","RegExp","test","map","length","fulfilledOptions","option","sort","o1","o2","Object","assign","module","exports"],"mappings":"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","sourcesContent":["const defaultOptions = [\r\n  {\r\n    id: 0,\r\n    value: \"Too weak\",\r\n    minDiversity: 0,\r\n    minLength: 0\r\n  },\r\n  {\r\n    id: 1,\r\n    value: \"Weak\",\r\n    minDiversity: 2,\r\n    minLength: 6\r\n  },\r\n  {\r\n    id: 2,\r\n    value: \"Medium\",\r\n    minDiversity: 4,\r\n    minLength: 8\r\n  },\r\n  {\r\n    id: 3,\r\n    value: \"Strong\",\r\n    minDiversity: 4,\r\n    minLength: 10\r\n  }\r\n]\r\n\r\nconst escapeRegExp = (string) => string.replace(/[-.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\r\n\r\nconst passwordStrength = (password, options = defaultOptions, allowedSymbols=\"!@#$%^&*\") => {\r\n  \r\n  let passwordCopy = password || ''\r\n\r\n  options[0].minDiversity = 0,\r\n  options[0].minLength = 0\r\n\r\n  const rules = [\r\n    {\r\n      regex: \"[a-z]\",\r\n      message: 'lowercase'\r\n    },\r\n    {\r\n      regex: '[A-Z]',\r\n      message: 'uppercase'\r\n    },\r\n    {\r\n      regex: '[0-9]',\r\n      message: 'number'\r\n    },\r\n  ]\r\n\r\n  if (allowedSymbols) {\r\n    rules.push({\r\n      regex: `[${escapeRegExp(allowedSymbols)}]`,\r\n      message: 'symbol'\r\n    })\r\n  }\r\n\r\n  let strength = {}\r\n\r\n  strength.contains = rules\r\n    .filter(rule => new RegExp(`${rule.regex}`).test(passwordCopy))\r\n    .map(rule => rule.message)\r\n\r\n  strength.length = passwordCopy.length;\r\n\r\n  let fulfilledOptions = options\r\n    .filter(option => strength.contains.length >= option.minDiversity)\r\n    .filter(option => strength.length >= option.minLength)\r\n    .sort((o1, o2) => o2.id - o1.id)\r\n    .map(option => ({id: option.id, value: option.value}))\r\n\r\n  Object.assign(strength, fulfilledOptions[0])\r\n\r\n  return strength;\r\n};\r\n\r\nmodule.exports = { passwordStrength, defaultOptions }"]},"metadata":{},"sourceType":"script"}