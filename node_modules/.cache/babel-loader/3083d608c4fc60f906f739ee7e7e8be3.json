{"ast":null,"code":"let aesjs = require('aes-js');\n\nlet pbkdf2 = require('pbkdf2'); // Hex to Bytes\n\n\nexport let encryptKey = (data, studyKey, iv) => {\n  // data to bytes\n  let dataBytes = aesjs.utils.utf8.toBytes(data);\n  let textBytes = aesjs.utils.utf8.toBytes(studyKey);\n  let buf_to_studyKey = Buffer.from(textBytes);\n  let backToByte_IV = aesjs.utils.hex.toBytes(iv);\n  let buf_to_IV = Buffer.from(backToByte_IV);\n  let aesCbc = new aesjs.ModeOfOperation.ctr(buf_to_studyKey, buf_to_IV);\n  let encryptedBytes_k1 = aesCbc.encrypt(dataBytes); // convert to the hex\n\n  let encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes_k1);\n  return encryptedHex;\n};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/Utils/Encryption.js"],"names":["aesjs","require","pbkdf2","encryptKey","data","studyKey","iv","dataBytes","utils","utf8","toBytes","textBytes","buf_to_studyKey","Buffer","from","backToByte_IV","hex","buf_to_IV","aesCbc","ModeOfOperation","ctr","encryptedBytes_k1","encrypt","encryptedHex","fromBytes"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB,C,CACA;;;AACA,OAAO,IAAIE,UAAU,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,EAAjB,KAAwB;AAE5C;AACA,MAAIC,SAAS,GAAGP,KAAK,CAACQ,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBN,IAAzB,CAAhB;AACA,MAAIO,SAAS,GAAGX,KAAK,CAACQ,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBL,QAAzB,CAAhB;AACA,MAAIO,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAtB;AACA,MAAII,aAAa,GAAGf,KAAK,CAACQ,KAAN,CAAYQ,GAAZ,CAAgBN,OAAhB,CAAwBJ,EAAxB,CAApB;AACA,MAAIW,SAAS,GAAGJ,MAAM,CAACC,IAAP,CAAYC,aAAZ,CAAhB;AACA,MAAIG,MAAM,GAAG,IAAIlB,KAAK,CAACmB,eAAN,CAAsBC,GAA1B,CAA8BR,eAA9B,EAA+CK,SAA/C,CAAb;AACA,MAAII,iBAAiB,GAAGH,MAAM,CAACI,OAAP,CAAef,SAAf,CAAxB,CAT4C,CAW5C;;AACA,MAAIgB,YAAY,GAAGvB,KAAK,CAACQ,KAAN,CAAYQ,GAAZ,CAAgBQ,SAAhB,CAA0BH,iBAA1B,CAAnB;AAEA,SAAOE,YAAP;AACH,CAfM","sourcesContent":["let aesjs = require('aes-js');\nlet pbkdf2 = require('pbkdf2');\n// Hex to Bytes\nexport let encryptKey = (data, studyKey, iv) => {\n\n    // data to bytes\n    let dataBytes = aesjs.utils.utf8.toBytes(data);\n    let textBytes = aesjs.utils.utf8.toBytes(studyKey);\n    let buf_to_studyKey = Buffer.from(textBytes);\n    let backToByte_IV = aesjs.utils.hex.toBytes(iv)\n    let buf_to_IV = Buffer.from(backToByte_IV);\n    let aesCbc = new aesjs.ModeOfOperation.ctr(buf_to_studyKey, buf_to_IV);\n    let encryptedBytes_k1 = aesCbc.encrypt(dataBytes);\n\n    // convert to the hex\n    let encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes_k1);\n\n    return encryptedHex;\n}"]},"metadata":{},"sourceType":"module"}