{"ast":null,"code":"let aesjs = require('aes-js'); // This will decrypt Key CTR\n\n\nexport let decryptDataCTR = (encryptedData, studyKey, iv) => {\n  // Convert the study key to bytes\n  let studyKeyBytes = aesjs.utils.utf8.toBytes(studyKey);\n  let encryptedBytes_k1 = aesjs.utils.hex.toBytes(encryptedData); // correct\n\n  let initVector = aesjs.utils.hex.toBytes(iv); // correct\n\n  let buffInitVector = Buffer.from(initVector);\n  let aesCbc = new aesjs.ModeOfOperation.ctr(studyKeyBytes, buffInitVector);\n  let decryptedBytes = aesCbc.decrypt(encryptedBytes_k1); // Convert our bytes back into text\n\n  let decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n  return decryptedText;\n};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/Utils/DecryptDataCTR.js"],"names":["aesjs","require","decryptDataCTR","encryptedData","studyKey","iv","studyKeyBytes","utils","utf8","toBytes","encryptedBytes_k1","hex","initVector","buffInitVector","Buffer","from","aesCbc","ModeOfOperation","ctr","decryptedBytes","decrypt","decryptedText","fromBytes"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB,C,CAEA;;;AACA,OAAO,IAAIC,cAAc,GAAG,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,EAA1B,KAAiC;AAEzD;AACA,MAAIC,aAAa,GAAGN,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBL,QAAzB,CAApB;AACA,MAAIM,iBAAiB,GAAGV,KAAK,CAACO,KAAN,CAAYI,GAAZ,CAAgBF,OAAhB,CAAwBN,aAAxB,CAAxB,CAJyD,CAIO;;AAChE,MAAIS,UAAU,GAAGZ,KAAK,CAACO,KAAN,CAAYI,GAAZ,CAAgBF,OAAhB,CAAwBJ,EAAxB,CAAjB,CALyD,CAKX;;AAC9C,MAAIQ,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAArB;AAEA,MAAII,MAAM,GAAG,IAAIhB,KAAK,CAACiB,eAAN,CAAsBC,GAA1B,CAA8BZ,aAA9B,EAA6CO,cAA7C,CAAb;AACA,MAAIM,cAAc,GAAGH,MAAM,CAACI,OAAP,CAAeV,iBAAf,CAArB,CATyD,CAW7D;;AACI,MAAIW,aAAa,GAAGrB,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBc,SAAjB,CAA2BH,cAA3B,CAApB;AACA,SAAOE,aAAP;AACH,CAdM","sourcesContent":["let aesjs = require('aes-js');\n\n// This will decrypt Key CTR\nexport let decryptDataCTR = (encryptedData, studyKey, iv) => {\n\n    // Convert the study key to bytes\n    let studyKeyBytes = aesjs.utils.utf8.toBytes(studyKey);\n    let encryptedBytes_k1 = aesjs.utils.hex.toBytes(encryptedData); // correct\n    let initVector = aesjs.utils.hex.toBytes(iv); // correct\n    let buffInitVector = Buffer.from(initVector);\n   \n    let aesCbc = new aesjs.ModeOfOperation.ctr(studyKeyBytes, buffInitVector);\n    let decryptedBytes = aesCbc.decrypt(encryptedBytes_k1);\n\n// Convert our bytes back into text\n    let decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n    return decryptedText;\n}"]},"metadata":{},"sourceType":"module"}