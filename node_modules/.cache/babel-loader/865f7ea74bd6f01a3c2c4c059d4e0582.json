{"ast":null,"code":"var aesjs=require('aes-js');var pbkdf2=require('pbkdf2');// Hex to Bytes\nexport var encryptKey=function encryptKey(data,studyKey,iv){// data to bytes\nvar dataBytes=aesjs.utils.utf8.toBytes(data);var textBytes=aesjs.utils.utf8.toBytes(studyKey);var buf_to_studyKey=Buffer.from(textBytes);var backToByte_IV=aesjs.utils.hex.toBytes(iv);var buf_to_IV=Buffer.from(backToByte_IV);var aesCbc=new aesjs.ModeOfOperation.ctr(buf_to_studyKey,buf_to_IV);var encryptedBytes_k1=aesCbc.encrypt(dataBytes);// convert to the hex\nvar encryptedHex=aesjs.utils.hex.fromBytes(encryptedBytes_k1);return encryptedHex;};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/Utils/Encryption.js"],"names":["aesjs","require","pbkdf2","encryptKey","data","studyKey","iv","dataBytes","utils","utf8","toBytes","textBytes","buf_to_studyKey","Buffer","from","backToByte_IV","hex","buf_to_IV","aesCbc","ModeOfOperation","ctr","encryptedBytes_k1","encrypt","encryptedHex","fromBytes"],"mappings":"AAAA,GAAIA,CAAAA,KAAK,CAAGC,OAAO,CAAC,QAAD,CAAnB,CACA,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAAC,QAAD,CAApB,CACA;AACA,MAAO,IAAIE,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAOC,QAAP,CAAiBC,EAAjB,CAAwB,CAE5C;AACA,GAAIC,CAAAA,SAAS,CAAGP,KAAK,CAACQ,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBN,IAAzB,CAAhB,CACA,GAAIO,CAAAA,SAAS,CAAGX,KAAK,CAACQ,KAAN,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBL,QAAzB,CAAhB,CACA,GAAIO,CAAAA,eAAe,CAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAtB,CACA,GAAII,CAAAA,aAAa,CAAGf,KAAK,CAACQ,KAAN,CAAYQ,GAAZ,CAAgBN,OAAhB,CAAwBJ,EAAxB,CAApB,CACA,GAAIW,CAAAA,SAAS,CAAGJ,MAAM,CAACC,IAAP,CAAYC,aAAZ,CAAhB,CACA,GAAIG,CAAAA,MAAM,CAAG,GAAIlB,CAAAA,KAAK,CAACmB,eAAN,CAAsBC,GAA1B,CAA8BR,eAA9B,CAA+CK,SAA/C,CAAb,CACA,GAAII,CAAAA,iBAAiB,CAAGH,MAAM,CAACI,OAAP,CAAef,SAAf,CAAxB,CAEA;AACA,GAAIgB,CAAAA,YAAY,CAAGvB,KAAK,CAACQ,KAAN,CAAYQ,GAAZ,CAAgBQ,SAAhB,CAA0BH,iBAA1B,CAAnB,CAEA,MAAOE,CAAAA,YAAP,CACH,CAfM","sourcesContent":["let aesjs = require('aes-js');\nlet pbkdf2 = require('pbkdf2');\n// Hex to Bytes\nexport let encryptKey = (data, studyKey, iv) => {\n\n    // data to bytes\n    let dataBytes = aesjs.utils.utf8.toBytes(data);\n    let textBytes = aesjs.utils.utf8.toBytes(studyKey);\n    let buf_to_studyKey = Buffer.from(textBytes);\n    let backToByte_IV = aesjs.utils.hex.toBytes(iv)\n    let buf_to_IV = Buffer.from(backToByte_IV);\n    let aesCbc = new aesjs.ModeOfOperation.ctr(buf_to_studyKey, buf_to_IV);\n    let encryptedBytes_k1 = aesCbc.encrypt(dataBytes);\n\n    // convert to the hex\n    let encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes_k1);\n\n    return encryptedHex;\n}"]},"metadata":{},"sourceType":"module"}