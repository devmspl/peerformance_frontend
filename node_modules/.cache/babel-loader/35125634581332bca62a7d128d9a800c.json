{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  user: '',\n  lastRegionSelected: '',\n  selectedPeerGroup: '',\n  regions: [],\n  userInfo: undefined,\n  userSubscriptions: [],\n  availableStudies: [],\n  queuedStudies: [],\n  allStudies: [],\n  studyData: undefined,\n  activeStudy: undefined,\n  // Participant breakdown\n  participantBreakDown: [],\n  // Top 3 regions\n  top3Regions: [],\n  // Region child\n  regionChildren: [],\n  // Region child\n  citesChildren: [],\n  // study Data By Region\n  studyDataByRegion: [],\n  lastPeerGroupSelected4Or5: '',\n  lastPeerGroupSelected6: ''\n};\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState: initialState,\n  reducers: {\n    setLastRegionSelected(state, action) {\n      state.lastRegionSelected = action.payload;\n    },\n\n    setUser(state, action) {\n      state.user = action.payload;\n    },\n\n    setRegions(state, action) {\n      state.regions = action.payload;\n    },\n\n    setUserInfo(state, action) {\n      state.userInfo = action.payload;\n    },\n\n    groupStudies(state, action) {\n      const {\n        studies,\n        studyId\n      } = action.payload;\n      studies.sort((a, b) => b.NumOfSubscribers - a.NumOfSubscribers);\n      const availableStudies = studies.filter(study => study.Status === 1);\n      const queuedStudies = studies.filter(study => study.Status === 0);\n      state.availableStudies = availableStudies;\n      state.queuedStudies = queuedStudies;\n      state.allStudies = studies; // Todo  check this code\n\n      if (availableStudies.length && !studyId) {\n        state.activeStudy = availableStudies[0];\n      } else if (availableStudies.length && studyId) {\n        state.activeStudy = availableStudies.find(study => study.ID === studyId);\n      } else {\n        state.activeStudy = null;\n      }\n    },\n\n    setUserSubscriptions(state, action) {\n      const subscriptions = action.payload;\n      state.userSubscriptions = subscriptions;\n    },\n\n    setStudyData(state, action) {\n      state.studyData = action.payload;\n    },\n\n    setActiveStudy(state, action) {\n      state.activeStudy = action.payload;\n    },\n\n    //  Participant breakdown\n    setParticipantBreakDown(state, action) {\n      state.participantBreakDown = action.payload;\n    },\n\n    //  top 3 regions\n    setTop3Regions(state, action) {\n      state.top3Regions = action.payload;\n    },\n\n    // Set the region Children\n    setRegionChildren(state, action) {\n      state.regionChildren = action.payload;\n    },\n\n    // Set the region Children\n    setCityChildren(state, action) {\n      state.citesChildren = action.payload;\n    },\n\n    // study Data By Region\n    studyDataByRegion(state, action) {\n      state.top3Regions = action.payload;\n    },\n\n    // study Data By Region\n    setLastPeerGroupSelected4Or5(state, action) {\n      state.lastPeerGroupSelected4Or5 = action.payload;\n    },\n\n    // study Data By Region\n    setLastPeerGroupSelected6(state, action) {\n      state.lastPeerGroupSelected6 = action.payload;\n    }\n\n  }\n});\nexport const dashboardActions = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/store/dashboard.js"],"names":["createSlice","initialState","user","lastRegionSelected","selectedPeerGroup","regions","userInfo","undefined","userSubscriptions","availableStudies","queuedStudies","allStudies","studyData","activeStudy","participantBreakDown","top3Regions","regionChildren","citesChildren","studyDataByRegion","lastPeerGroupSelected4Or5","lastPeerGroupSelected6","dashboardSlice","name","reducers","setLastRegionSelected","state","action","payload","setUser","setRegions","setUserInfo","groupStudies","studies","studyId","sort","a","b","NumOfSubscribers","filter","study","Status","length","find","ID","setUserSubscriptions","subscriptions","setStudyData","setActiveStudy","setParticipantBreakDown","setTop3Regions","setRegionChildren","setCityChildren","setLastPeerGroupSelected4Or5","setLastPeerGroupSelected6","dashboardActions","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = {\n    user: '',\n    lastRegionSelected: '',\n    selectedPeerGroup: '',\n    regions: [],\n    userInfo: undefined,\n    userSubscriptions: [],\n    availableStudies: [],\n    queuedStudies: [],\n    allStudies: [],\n    studyData: undefined,\n    activeStudy: undefined,\n\n    // Participant breakdown\n    participantBreakDown: [],\n\n    // Top 3 regions\n    top3Regions: [],\n\n    // Region child\n    regionChildren: [],\n\n    // Region child\n    citesChildren: [],\n\n    // study Data By Region\n    studyDataByRegion: [],\n\n    lastPeerGroupSelected4Or5: '',\n\n    lastPeerGroupSelected6: '',\n\n};\n\nconst dashboardSlice = createSlice({\n    name: 'dashboard',\n    initialState: initialState,\n    reducers: {\n        setLastRegionSelected(state, action) {\n            state.lastRegionSelected = action.payload;\n        },\n\n        setUser(state, action) {\n            state.user = action.payload;\n        },\n        setRegions(state, action) {\n            state.regions = action.payload;\n        },\n        setUserInfo(state, action) {\n            state.userInfo = action.payload;\n        },\n\n        groupStudies(state, action) {\n            const {studies, studyId} = action.payload;\n            studies.sort((a, b) => b.NumOfSubscribers - a.NumOfSubscribers);\n\n            const availableStudies = studies.filter(study => study.Status === 1);\n            const queuedStudies = studies.filter(study => study.Status === 0);\n\n            state.availableStudies = availableStudies;\n            state.queuedStudies = queuedStudies;\n            state.allStudies = studies;\n\n            // Todo  check this code\n            if (availableStudies.length && !studyId) {\n                state.activeStudy = availableStudies[0];\n\n            } else if (availableStudies.length && studyId) {\n                state.activeStudy = availableStudies.find(study => study.ID === studyId);\n            } else {\n                state.activeStudy = null;\n            }\n        },\n\n        setUserSubscriptions(state, action) {\n            const subscriptions = action.payload;\n            state.userSubscriptions = subscriptions;\n        },\n        setStudyData(state, action) {\n            state.studyData = action.payload;\n        },\n        setActiveStudy(state, action) {\n            state.activeStudy = action.payload;\n        },\n\n        //  Participant breakdown\n        setParticipantBreakDown(state, action) {\n            state.participantBreakDown = action.payload;\n        },\n\n        //  top 3 regions\n        setTop3Regions(state, action) {\n            state.top3Regions = action.payload;\n        },\n\n        // Set the region Children\n        setRegionChildren(state, action) {\n            state.regionChildren = action.payload;\n        },\n\n        // Set the region Children\n        setCityChildren(state, action) {\n            state.citesChildren = action.payload;\n        },\n\n        // study Data By Region\n        studyDataByRegion(state, action) {\n            state.top3Regions = action.payload;\n        },\n\n        // study Data By Region\n        setLastPeerGroupSelected4Or5(state, action) {\n            state.lastPeerGroupSelected4Or5 = action.payload;\n        },\n        // study Data By Region\n        setLastPeerGroupSelected6(state, action) {\n            state.lastPeerGroupSelected6 = action.payload;\n        }\n\n    }\n});\n\nexport const dashboardActions = dashboardSlice.actions;\nexport default dashboardSlice.reducer;"]},"metadata":{},"sourceType":"module"}