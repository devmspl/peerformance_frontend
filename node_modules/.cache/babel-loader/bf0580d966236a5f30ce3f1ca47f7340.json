{"ast":null,"code":"import { dashboardActions } from './dashboard';\nimport { fetchRegions, fetchUserInfo, fetchUserSubscriptions, addSubscription, updatePeerGroup, fetchAddStudyData, fetchGetStudyData, fetchTop3Level, fetchRegionChild, fetchParticipantBreakDown, fetchStudyByRegion, updateRegion, fetchRegionById, fetchPeerGroup } from './dashboardFetches'; // participant breakdown data\n\nexport const getParticipantBreakdown = studyId => {\n  return async (dispatch, getState) => {\n    const participantBreakdown = await fetchParticipantBreakDown(studyId);\n    dispatch(dashboardActions.setParticipantBreakDown(participantBreakdown));\n  };\n};\nexport const getStudies = function (peerGroupID, regionID) {\n  let studyId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return async dispatch => {\n    let studies = await fetchStudyByRegion(peerGroupID, regionID);\n    dispatch(dashboardActions.groupStudies({\n      studies,\n      studyId\n    }));\n    const availableStudies = studies.filter(study => study.Status === 1);\n\n    if (availableStudies.length && !studyId) {\n      dispatch(getStudyData(availableStudies[0].ID));\n      dispatch(getParticipantBreakdown(availableStudies[0].ID));\n    } else if (availableStudies.length && studyId) {\n      dispatch(getStudyData(studyId));\n    }\n  };\n}; // Get top 3 levels\n\nexport const getTop3Regions = () => {\n  return async dispatch => {\n    const top3regions = await fetchTop3Level();\n    dispatch(dashboardActions.setTop3Regions(top3regions));\n  };\n}; // Get region child\n\nexport const getRegionChildren = parent => {\n  return async dispatch => {\n    const regionChildren = await fetchRegionChild(parent);\n    dispatch(dashboardActions.setRegionChildren(regionChildren));\n  };\n}; // Get region child\n\nexport const getCityChildren = parent => {\n  return async dispatch => {\n    const regionChildren = await fetchRegionChild(parent);\n    dispatch(dashboardActions.setCityChildren(regionChildren));\n  };\n}; // Get all regions\n\nexport const getRegions = () => {\n  return async dispatch => {\n    const regions = await fetchRegions();\n    dispatch(dashboardActions.setRegions(regions));\n  };\n};\nexport const updateLastRegion = regionID => {\n  return async dispatch => {\n    const region = await updateRegion(regionID);\n  };\n};\nexport const updateLastPeerGroup = id => {\n  return async dispatch => {\n    const studies = await updatePeerGroup(id);\n  };\n};\nexport const getRegionById = id => {\n  return async dispatch => {\n    let regionById = fetchRegionById(id);\n    dispatch(dashboardActions.setLastRegionSelected(regionById));\n  };\n};\nexport const getUserInfo = () => {\n  return async dispatch => {\n    const userInfo = await fetchUserInfo();\n    let regionById;\n    let peerGroupById;\n    dispatch(dashboardActions.setUserInfo(userInfo));\n\n    if (userInfo && userInfo.Peer_Group_ID) {\n      //Setting the region id extracted from the backend/db\n      if (userInfo.RegionID) {\n        getRegionById(userInfo.RegionID);\n        localStorage.setItem(\"storedRegionId\", userInfo.RegionID); // Setting region\n\n        regionById = fetchRegionById(userInfo.RegionID);\n        dispatch(dashboardActions.setLastRegionSelected(regionById));\n      } // getting the region id from session storage\n\n\n      let regionId = sessionStorage.getItem(\"regionId\");\n      dispatch(getStudies(userInfo.Peer_Group_ID, regionId)); // Set the peer group that the user last selected\n\n      localStorage.setItem(\"lastSelectedPeerGroup\", userInfo.Peer_Group_ID);\n      peerGroupById = fetchPeerGroup(userInfo.Peer_Group_ID);\n      dispatch(dashboardActions.setLastPeerGroupSelected4Or5(peerGroupById));\n    }\n  };\n};\nexport const getUserSubscriptions = () => {\n  return async (dispatch, getState) => {\n    const userSubscriptions = await fetchUserSubscriptions();\n    dispatch(dashboardActions.setUserSubscriptions(userSubscriptions));\n  };\n};\nexport const subscribeStudy = studyId => {\n  return async (dispatch, getState) => {\n    const userSubscriptions = await addSubscription(studyId);\n    dispatch(getUserSubscriptions());\n  };\n};\nexport const addStudyData = (value, studyId) => {\n  return async (dispatch, getState) => {\n    console.log(`value---fetch`, value);\n    const addDataResult = await fetchAddStudyData(value, studyId);\n  };\n};\nexport const getStudyData = studyId => {\n  return async dispatch => {\n    const studyData = await fetchGetStudyData(studyId);\n    dispatch(dashboardActions.setStudyData(studyData));\n  };\n};","map":{"version":3,"sources":["/home/mspl/Desktop/peerformance_frontend/src/store/dashboardActions.js"],"names":["dashboardActions","fetchRegions","fetchUserInfo","fetchUserSubscriptions","addSubscription","updatePeerGroup","fetchAddStudyData","fetchGetStudyData","fetchTop3Level","fetchRegionChild","fetchParticipantBreakDown","fetchStudyByRegion","updateRegion","fetchRegionById","fetchPeerGroup","getParticipantBreakdown","studyId","dispatch","getState","participantBreakdown","setParticipantBreakDown","getStudies","peerGroupID","regionID","undefined","studies","groupStudies","availableStudies","filter","study","Status","length","getStudyData","ID","getTop3Regions","top3regions","setTop3Regions","getRegionChildren","parent","regionChildren","setRegionChildren","getCityChildren","setCityChildren","getRegions","regions","setRegions","updateLastRegion","region","updateLastPeerGroup","id","getRegionById","regionById","setLastRegionSelected","getUserInfo","userInfo","peerGroupById","setUserInfo","Peer_Group_ID","RegionID","localStorage","setItem","regionId","sessionStorage","getItem","setLastPeerGroupSelected4Or5","getUserSubscriptions","userSubscriptions","setUserSubscriptions","subscribeStudy","addStudyData","value","console","log","addDataResult","studyData","setStudyData"],"mappings":"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","sourcesContent":["import {dashboardActions} from './dashboard';\nimport {\n    fetchRegions,\n    fetchUserInfo,\n    fetchUserSubscriptions,\n    addSubscription,\n    updatePeerGroup,\n    fetchAddStudyData,\n    fetchGetStudyData,\n    fetchTop3Level,\n    fetchRegionChild,\n    fetchParticipantBreakDown,\n    fetchStudyByRegion,\n    updateRegion, fetchRegionById, fetchPeerGroup\n} from './dashboardFetches';\n\n\n// participant breakdown data\nexport const getParticipantBreakdown = (studyId) => {\n    return async (dispatch, getState) => {\n        const participantBreakdown = await fetchParticipantBreakDown(studyId);\n        dispatch(dashboardActions.setParticipantBreakDown(participantBreakdown));\n    };\n};\n\nexport const getStudies = (peerGroupID, regionID, studyId = undefined) => {\n    return async (dispatch) => {\n        let studies = await fetchStudyByRegion(peerGroupID, regionID);\n        dispatch(dashboardActions.groupStudies({studies, studyId}));\n        const availableStudies = studies.filter(study => study.Status === 1);\n        if (availableStudies.length && !studyId) {\n            dispatch(getStudyData(availableStudies[0].ID));\n            dispatch(getParticipantBreakdown(availableStudies[0].ID));\n\n        } else if (availableStudies.length && studyId) {\n            dispatch(getStudyData(studyId));\n        }\n    };\n};\n\n// Get top 3 levels\nexport const getTop3Regions = () => {\n    return async dispatch => {\n        const top3regions = await fetchTop3Level();\n        dispatch(dashboardActions.setTop3Regions(top3regions));\n    };\n};\n\n// Get region child\nexport const getRegionChildren = parent => {\n    return async dispatch => {\n        const regionChildren = await fetchRegionChild(parent);\n        dispatch(dashboardActions.setRegionChildren(regionChildren));\n    };\n};\n\n// Get region child\nexport const getCityChildren = parent => {\n    return async dispatch => {\n        const regionChildren = await fetchRegionChild(parent);\n        dispatch(dashboardActions.setCityChildren(regionChildren));\n    };\n};\n\n// Get all regions\nexport const getRegions = () => {\n    return async dispatch => {\n        const regions = await fetchRegions();\n        dispatch(dashboardActions.setRegions(regions));\n    };\n};\n\nexport const updateLastRegion = (regionID) => {\n    return async (dispatch) => {\n        const region = await updateRegion(regionID);\n    };\n};\n\nexport const updateLastPeerGroup = (id) => {\n    return async (dispatch) => {\n        const studies = await updatePeerGroup(id);\n    };\n};\n\nexport const getRegionById = (id) => {\n    return async dispatch => {\n        let regionById = fetchRegionById(id);\n        dispatch(dashboardActions.setLastRegionSelected(regionById));\n    };\n};\n\nexport const getUserInfo = () => {\n    return async dispatch => {\n        const userInfo = await fetchUserInfo();\n        let regionById;\n        let peerGroupById;\n        dispatch(dashboardActions.setUserInfo(userInfo));\n        if (userInfo && userInfo.Peer_Group_ID) {\n            //Setting the region id extracted from the backend/db\n            if (userInfo.RegionID) {\n                getRegionById(userInfo.RegionID)\n\n                localStorage.setItem(\"storedRegionId\", userInfo.RegionID);\n\n                // Setting region\n                regionById = fetchRegionById(userInfo.RegionID);\n                dispatch(dashboardActions.setLastRegionSelected(regionById));\n\n            }\n            // getting the region id from session storage\n            let regionId = sessionStorage.getItem(\"regionId\");\n            dispatch(getStudies(userInfo.Peer_Group_ID, regionId));\n\n            // Set the peer group that the user last selected\n            localStorage.setItem(\"lastSelectedPeerGroup\", userInfo.Peer_Group_ID)\n\n            peerGroupById = fetchPeerGroup(userInfo.Peer_Group_ID);\n            dispatch(dashboardActions.setLastPeerGroupSelected4Or5(peerGroupById));\n        }\n    };\n};\n\nexport const getUserSubscriptions = () => {\n    return async (dispatch, getState) => {\n        const userSubscriptions = await fetchUserSubscriptions();\n        dispatch(dashboardActions.setUserSubscriptions(userSubscriptions));\n    };\n};\n\nexport const subscribeStudy = (studyId) => {\n    return async (dispatch, getState) => {\n        const userSubscriptions = await addSubscription(studyId);\n        dispatch(getUserSubscriptions());\n    };\n};\n\nexport const addStudyData = (value, studyId) => {\n    return async (dispatch, getState) => {\n        console.log(`value---fetch`, value);\n        const addDataResult = await fetchAddStudyData(value, studyId);\n    };\n};\n\nexport const getStudyData = studyId => {\n    return async (dispatch) => {\n        const studyData = await fetchGetStudyData(studyId);\n        dispatch(dashboardActions.setStudyData(studyData));\n    };\n};"]},"metadata":{},"sourceType":"module"}